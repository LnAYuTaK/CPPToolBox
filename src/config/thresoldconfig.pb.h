// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thresoldconfig.proto

#ifndef PROTOBUF_INCLUDED_thresoldconfig_2eproto
#define PROTOBUF_INCLUDED_thresoldconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_thresoldconfig_2eproto 

namespace protobuf_thresoldconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_thresoldconfig_2eproto
class GasThreshold;
class GasThresholdDefaultTypeInternal;
extern GasThresholdDefaultTypeInternal _GasThreshold_default_instance_;
class GasThresholdList;
class GasThresholdListDefaultTypeInternal;
extern GasThresholdListDefaultTypeInternal _GasThresholdList_default_instance_;
namespace google {
namespace protobuf {
template<> ::GasThreshold* Arena::CreateMaybeMessage<::GasThreshold>(Arena*);
template<> ::GasThresholdList* Arena::CreateMaybeMessage<::GasThresholdList>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class GasThreshold : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GasThreshold) */ {
 public:
  GasThreshold();
  virtual ~GasThreshold();

  GasThreshold(const GasThreshold& from);

  inline GasThreshold& operator=(const GasThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GasThreshold(GasThreshold&& from) noexcept
    : GasThreshold() {
    *this = ::std::move(from);
  }

  inline GasThreshold& operator=(GasThreshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GasThreshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GasThreshold* internal_default_instance() {
    return reinterpret_cast<const GasThreshold*>(
               &_GasThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GasThreshold* other);
  friend void swap(GasThreshold& a, GasThreshold& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GasThreshold* New() const final {
    return CreateMaybeMessage<GasThreshold>(NULL);
  }

  GasThreshold* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GasThreshold>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GasThreshold& from);
  void MergeFrom(const GasThreshold& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasThreshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float ThresholdL_Max1 = 2;
  void clear_thresholdl_max1();
  static const int kThresholdLMax1FieldNumber = 2;
  float thresholdl_max1() const;
  void set_thresholdl_max1(float value);

  // float ThresholdL_Max2 = 3;
  void clear_thresholdl_max2();
  static const int kThresholdLMax2FieldNumber = 3;
  float thresholdl_max2() const;
  void set_thresholdl_max2(float value);

  // float ThresholdL_Max3 = 4;
  void clear_thresholdl_max3();
  static const int kThresholdLMax3FieldNumber = 4;
  float thresholdl_max3() const;
  void set_thresholdl_max3(float value);

  // float ThresholdL_Min1 = 5;
  void clear_thresholdl_min1();
  static const int kThresholdLMin1FieldNumber = 5;
  float thresholdl_min1() const;
  void set_thresholdl_min1(float value);

  // float ThresholdL_Min2 = 6;
  void clear_thresholdl_min2();
  static const int kThresholdLMin2FieldNumber = 6;
  float thresholdl_min2() const;
  void set_thresholdl_min2(float value);

  // float ThresholdL_Min3 = 7;
  void clear_thresholdl_min3();
  static const int kThresholdLMin3FieldNumber = 7;
  float thresholdl_min3() const;
  void set_thresholdl_min3(float value);

  // float ThresholdChange = 8;
  void clear_thresholdchange();
  static const int kThresholdChangeFieldNumber = 8;
  float thresholdchange() const;
  void set_thresholdchange(float value);

  // @@protoc_insertion_point(class_scope:GasThreshold)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float thresholdl_max1_;
  float thresholdl_max2_;
  float thresholdl_max3_;
  float thresholdl_min1_;
  float thresholdl_min2_;
  float thresholdl_min3_;
  float thresholdchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_thresoldconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GasThresholdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GasThresholdList) */ {
 public:
  GasThresholdList();
  virtual ~GasThresholdList();

  GasThresholdList(const GasThresholdList& from);

  inline GasThresholdList& operator=(const GasThresholdList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GasThresholdList(GasThresholdList&& from) noexcept
    : GasThresholdList() {
    *this = ::std::move(from);
  }

  inline GasThresholdList& operator=(GasThresholdList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GasThresholdList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GasThresholdList* internal_default_instance() {
    return reinterpret_cast<const GasThresholdList*>(
               &_GasThresholdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GasThresholdList* other);
  friend void swap(GasThresholdList& a, GasThresholdList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GasThresholdList* New() const final {
    return CreateMaybeMessage<GasThresholdList>(NULL);
  }

  GasThresholdList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GasThresholdList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GasThresholdList& from);
  void MergeFrom(const GasThresholdList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasThresholdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GasThreshold thresholds = 1;
  int thresholds_size() const;
  void clear_thresholds();
  static const int kThresholdsFieldNumber = 1;
  ::GasThreshold* mutable_thresholds(int index);
  ::google::protobuf::RepeatedPtrField< ::GasThreshold >*
      mutable_thresholds();
  const ::GasThreshold& thresholds(int index) const;
  ::GasThreshold* add_thresholds();
  const ::google::protobuf::RepeatedPtrField< ::GasThreshold >&
      thresholds() const;

  // @@protoc_insertion_point(class_scope:GasThresholdList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GasThreshold > thresholds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_thresoldconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GasThreshold

// string Name = 1;
inline void GasThreshold::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GasThreshold::name() const {
  // @@protoc_insertion_point(field_get:GasThreshold.Name)
  return name_.GetNoArena();
}
inline void GasThreshold::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GasThreshold.Name)
}
#if LANG_CXX11
inline void GasThreshold::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GasThreshold.Name)
}
#endif
inline void GasThreshold::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GasThreshold.Name)
}
inline void GasThreshold::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GasThreshold.Name)
}
inline ::std::string* GasThreshold::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GasThreshold.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GasThreshold::release_name() {
  // @@protoc_insertion_point(field_release:GasThreshold.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GasThreshold::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GasThreshold.Name)
}

// float ThresholdL_Max1 = 2;
inline void GasThreshold::clear_thresholdl_max1() {
  thresholdl_max1_ = 0;
}
inline float GasThreshold::thresholdl_max1() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdL_Max1)
  return thresholdl_max1_;
}
inline void GasThreshold::set_thresholdl_max1(float value) {
  
  thresholdl_max1_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdL_Max1)
}

// float ThresholdL_Max2 = 3;
inline void GasThreshold::clear_thresholdl_max2() {
  thresholdl_max2_ = 0;
}
inline float GasThreshold::thresholdl_max2() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdL_Max2)
  return thresholdl_max2_;
}
inline void GasThreshold::set_thresholdl_max2(float value) {
  
  thresholdl_max2_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdL_Max2)
}

// float ThresholdL_Max3 = 4;
inline void GasThreshold::clear_thresholdl_max3() {
  thresholdl_max3_ = 0;
}
inline float GasThreshold::thresholdl_max3() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdL_Max3)
  return thresholdl_max3_;
}
inline void GasThreshold::set_thresholdl_max3(float value) {
  
  thresholdl_max3_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdL_Max3)
}

// float ThresholdL_Min1 = 5;
inline void GasThreshold::clear_thresholdl_min1() {
  thresholdl_min1_ = 0;
}
inline float GasThreshold::thresholdl_min1() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdL_Min1)
  return thresholdl_min1_;
}
inline void GasThreshold::set_thresholdl_min1(float value) {
  
  thresholdl_min1_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdL_Min1)
}

// float ThresholdL_Min2 = 6;
inline void GasThreshold::clear_thresholdl_min2() {
  thresholdl_min2_ = 0;
}
inline float GasThreshold::thresholdl_min2() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdL_Min2)
  return thresholdl_min2_;
}
inline void GasThreshold::set_thresholdl_min2(float value) {
  
  thresholdl_min2_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdL_Min2)
}

// float ThresholdL_Min3 = 7;
inline void GasThreshold::clear_thresholdl_min3() {
  thresholdl_min3_ = 0;
}
inline float GasThreshold::thresholdl_min3() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdL_Min3)
  return thresholdl_min3_;
}
inline void GasThreshold::set_thresholdl_min3(float value) {
  
  thresholdl_min3_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdL_Min3)
}

// float ThresholdChange = 8;
inline void GasThreshold::clear_thresholdchange() {
  thresholdchange_ = 0;
}
inline float GasThreshold::thresholdchange() const {
  // @@protoc_insertion_point(field_get:GasThreshold.ThresholdChange)
  return thresholdchange_;
}
inline void GasThreshold::set_thresholdchange(float value) {
  
  thresholdchange_ = value;
  // @@protoc_insertion_point(field_set:GasThreshold.ThresholdChange)
}

// -------------------------------------------------------------------

// GasThresholdList

// repeated .GasThreshold thresholds = 1;
inline int GasThresholdList::thresholds_size() const {
  return thresholds_.size();
}
inline void GasThresholdList::clear_thresholds() {
  thresholds_.Clear();
}
inline ::GasThreshold* GasThresholdList::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:GasThresholdList.thresholds)
  return thresholds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GasThreshold >*
GasThresholdList::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:GasThresholdList.thresholds)
  return &thresholds_;
}
inline const ::GasThreshold& GasThresholdList::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:GasThresholdList.thresholds)
  return thresholds_.Get(index);
}
inline ::GasThreshold* GasThresholdList::add_thresholds() {
  // @@protoc_insertion_point(field_add:GasThresholdList.thresholds)
  return thresholds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GasThreshold >&
GasThresholdList::thresholds() const {
  // @@protoc_insertion_point(field_list:GasThresholdList.thresholds)
  return thresholds_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_thresoldconfig_2eproto
