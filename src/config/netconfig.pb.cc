// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netconfig.proto

#include "netconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class NetConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetConfig>
      _instance;
} _NetConfig_default_instance_;
namespace protobuf_netconfig_2eproto {
static void InitDefaultsNetConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetConfig_default_instance_;
    new (ptr) ::NetConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, mqttserverurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, mqttclientname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, mqttname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, mqttpassword_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, clienthost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, tcpclientport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, serverhost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NetConfig, tcpserverport_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NetConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NetConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "netconfig.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017netconfig.proto\"\270\001\n\tNetConfig\022\025\n\rMqttS"
      "erverURL\030\001 \001(\t\022\026\n\016MqttClientName\030\002 \001(\t\022\020"
      "\n\010MqttName\030\003 \001(\t\022\024\n\014MqttPassword\030\004 \001(\t\022\022"
      "\n\nClientHost\030\005 \001(\t\022\025\n\rTCPClientPort\030\006 \001("
      "\005\022\022\n\nServerHost\030\007 \001(\t\022\025\n\rTCPServerPort\030\010"
      " \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netconfig.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_netconfig_2eproto

// ===================================================================

void NetConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetConfig::kMqttServerURLFieldNumber;
const int NetConfig::kMqttClientNameFieldNumber;
const int NetConfig::kMqttNameFieldNumber;
const int NetConfig::kMqttPasswordFieldNumber;
const int NetConfig::kClientHostFieldNumber;
const int NetConfig::kTCPClientPortFieldNumber;
const int NetConfig::kServerHostFieldNumber;
const int NetConfig::kTCPServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetConfig::NetConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netconfig_2eproto::scc_info_NetConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetConfig)
}
NetConfig::NetConfig(const NetConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mqttserverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mqttserverurl().size() > 0) {
    mqttserverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttserverurl_);
  }
  mqttclientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mqttclientname().size() > 0) {
    mqttclientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttclientname_);
  }
  mqttname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mqttname().size() > 0) {
    mqttname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttname_);
  }
  mqttpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mqttpassword().size() > 0) {
    mqttpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttpassword_);
  }
  clienthost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clienthost().size() > 0) {
    clienthost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clienthost_);
  }
  serverhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverhost().size() > 0) {
    serverhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverhost_);
  }
  ::memcpy(&tcpclientport_, &from.tcpclientport_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcpserverport_) -
    reinterpret_cast<char*>(&tcpclientport_)) + sizeof(tcpserverport_));
  // @@protoc_insertion_point(copy_constructor:NetConfig)
}

void NetConfig::SharedCtor() {
  mqttserverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttclientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clienthost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tcpclientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpserverport_) -
      reinterpret_cast<char*>(&tcpclientport_)) + sizeof(tcpserverport_));
}

NetConfig::~NetConfig() {
  // @@protoc_insertion_point(destructor:NetConfig)
  SharedDtor();
}

void NetConfig::SharedDtor() {
  mqttserverurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttclientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clienthost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetConfig::descriptor() {
  ::protobuf_netconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetConfig& NetConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netconfig_2eproto::scc_info_NetConfig.base);
  return *internal_default_instance();
}


void NetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:NetConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mqttserverurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttclientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mqttpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clienthost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tcpclientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcpserverport_) -
      reinterpret_cast<char*>(&tcpclientport_)) + sizeof(tcpserverport_));
  _internal_metadata_.Clear();
}

bool NetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string MqttServerURL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mqttserverurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mqttserverurl().data(), static_cast<int>(this->mqttserverurl().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetConfig.MqttServerURL"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string MqttClientName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mqttclientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mqttclientname().data(), static_cast<int>(this->mqttclientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetConfig.MqttClientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string MqttName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mqttname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mqttname().data(), static_cast<int>(this->mqttname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetConfig.MqttName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string MqttPassword = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mqttpassword()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mqttpassword().data(), static_cast<int>(this->mqttpassword().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetConfig.MqttPassword"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientHost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clienthost()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clienthost().data(), static_cast<int>(this->clienthost().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetConfig.ClientHost"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TCPClientPort = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpclientport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerHost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverhost()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverhost().data(), static_cast<int>(this->serverhost().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NetConfig.ServerHost"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TCPServerPort = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpserverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetConfig)
  return false;
#undef DO_
}

void NetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MqttServerURL = 1;
  if (this->mqttserverurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttserverurl().data(), static_cast<int>(this->mqttserverurl().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttServerURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mqttserverurl(), output);
  }

  // string MqttClientName = 2;
  if (this->mqttclientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttclientname().data(), static_cast<int>(this->mqttclientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttClientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mqttclientname(), output);
  }

  // string MqttName = 3;
  if (this->mqttname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttname().data(), static_cast<int>(this->mqttname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mqttname(), output);
  }

  // string MqttPassword = 4;
  if (this->mqttpassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttpassword().data(), static_cast<int>(this->mqttpassword().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mqttpassword(), output);
  }

  // string ClientHost = 5;
  if (this->clienthost().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clienthost().data(), static_cast<int>(this->clienthost().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.ClientHost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->clienthost(), output);
  }

  // int32 TCPClientPort = 6;
  if (this->tcpclientport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tcpclientport(), output);
  }

  // string ServerHost = 7;
  if (this->serverhost().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverhost().data(), static_cast<int>(this->serverhost().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.ServerHost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serverhost(), output);
  }

  // int32 TCPServerPort = 8;
  if (this->tcpserverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tcpserverport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NetConfig)
}

::google::protobuf::uint8* NetConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MqttServerURL = 1;
  if (this->mqttserverurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttserverurl().data(), static_cast<int>(this->mqttserverurl().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttServerURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mqttserverurl(), target);
  }

  // string MqttClientName = 2;
  if (this->mqttclientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttclientname().data(), static_cast<int>(this->mqttclientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttClientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mqttclientname(), target);
  }

  // string MqttName = 3;
  if (this->mqttname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttname().data(), static_cast<int>(this->mqttname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mqttname(), target);
  }

  // string MqttPassword = 4;
  if (this->mqttpassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mqttpassword().data(), static_cast<int>(this->mqttpassword().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.MqttPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mqttpassword(), target);
  }

  // string ClientHost = 5;
  if (this->clienthost().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clienthost().data(), static_cast<int>(this->clienthost().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.ClientHost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clienthost(), target);
  }

  // int32 TCPClientPort = 6;
  if (this->tcpclientport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tcpclientport(), target);
  }

  // string ServerHost = 7;
  if (this->serverhost().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverhost().data(), static_cast<int>(this->serverhost().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NetConfig.ServerHost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serverhost(), target);
  }

  // int32 TCPServerPort = 8;
  if (this->tcpserverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tcpserverport(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetConfig)
  return target;
}

size_t NetConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string MqttServerURL = 1;
  if (this->mqttserverurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mqttserverurl());
  }

  // string MqttClientName = 2;
  if (this->mqttclientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mqttclientname());
  }

  // string MqttName = 3;
  if (this->mqttname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mqttname());
  }

  // string MqttPassword = 4;
  if (this->mqttpassword().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mqttpassword());
  }

  // string ClientHost = 5;
  if (this->clienthost().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clienthost());
  }

  // string ServerHost = 7;
  if (this->serverhost().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverhost());
  }

  // int32 TCPClientPort = 6;
  if (this->tcpclientport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpclientport());
  }

  // int32 TCPServerPort = 8;
  if (this->tcpserverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpserverport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NetConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetConfig)
    MergeFrom(*source);
  }
}

void NetConfig::MergeFrom(const NetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mqttserverurl().size() > 0) {

    mqttserverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttserverurl_);
  }
  if (from.mqttclientname().size() > 0) {

    mqttclientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttclientname_);
  }
  if (from.mqttname().size() > 0) {

    mqttname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttname_);
  }
  if (from.mqttpassword().size() > 0) {

    mqttpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mqttpassword_);
  }
  if (from.clienthost().size() > 0) {

    clienthost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clienthost_);
  }
  if (from.serverhost().size() > 0) {

    serverhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverhost_);
  }
  if (from.tcpclientport() != 0) {
    set_tcpclientport(from.tcpclientport());
  }
  if (from.tcpserverport() != 0) {
    set_tcpserverport(from.tcpserverport());
  }
}

void NetConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfig::CopyFrom(const NetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfig::IsInitialized() const {
  return true;
}

void NetConfig::Swap(NetConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetConfig::InternalSwap(NetConfig* other) {
  using std::swap;
  mqttserverurl_.Swap(&other->mqttserverurl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mqttclientname_.Swap(&other->mqttclientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mqttname_.Swap(&other->mqttname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mqttpassword_.Swap(&other->mqttpassword_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clienthost_.Swap(&other->clienthost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverhost_.Swap(&other->serverhost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tcpclientport_, other->tcpclientport_);
  swap(tcpserverport_, other->tcpserverport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetConfig::GetMetadata() const {
  protobuf_netconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NetConfig* Arena::CreateMaybeMessage< ::NetConfig >(Arena* arena) {
  return Arena::CreateInternal< ::NetConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
